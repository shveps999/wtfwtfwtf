#!/usr/bin/env python3
"""
Telegram Events Bot - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import asyncio
import os
from contextlib import asynccontextmanager
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
import logfire

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º Logfire, –Ω–µ —Ç—Ä–µ–±—É—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã.
# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ–±–ª–∞–∫–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ LOGFIRE_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
logfire.configure()
logfire.info("Logfire —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω.")

from events_bot.database import init_database
from events_bot.bot.handlers import (
    register_start_handlers,
    register_user_handlers,
    register_post_handlers,
    register_callback_handlers,
    register_moderation_handlers,
    register_feed_handlers,
)
from events_bot.bot.middleware import DatabaseMiddleware
from events_bot.database.services.post_service import PostService


async def cleanup_expired_posts_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."""
    from events_bot.bot.utils import get_db_session
    from events_bot.storage import file_storage
    logfire.info("üåÄ –ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø–æ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
    
    while True:
        try:
            # –ü–∞—É–∑–∞ –≤ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞, –∞ –Ω–µ –≤ –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
            await asyncio.sleep(60 * 10) # 10 –º–∏–Ω—É—Ç
            
            async with get_db_session() as db:
                expired_posts_info = await PostService.get_expired_posts_info(db)
                
                if not expired_posts_info:
                    continue

                deleted_count = await PostService.delete_expired_posts(db)
                
                if deleted_count:
                    logfire.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ/–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {deleted_count}")
                    for post_info in expired_posts_info:
                        image_id = post_info.get("image_id")
                        if image_id:
                            try:
                                await file_storage.delete_file(image_id)
                            except Exception as file_e:
                                logfire.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {image_id}: {file_e}")
        except asyncio.CancelledError:
            logfire.info("üåÄ –ó–∞–¥–∞—á–∞ –ø–æ –æ—á–∏—Å—Ç–∫–µ –ø–æ—Å—Ç–æ–≤ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            break
        except Exception as e:
            logfire.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}", exc_info=True)
            await asyncio.sleep(60 * 30) 


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    try:
        from dotenv import load_dotenv
        load_dotenv()
        logfire.info("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    except ImportError:
        logfire.info(".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

    token = os.getenv("BOT_TOKEN")
    if not token:
        logfire.critical("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ DATABASE_URL ---
    # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        logfire.critical("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return

    await init_database()
    logfire.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

    bot = Bot(token=token, parse_mode="HTML")
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    dp.message.middleware(DatabaseMiddleware())
    dp.callback_query.middleware(DatabaseMiddleware())

    register_start_handlers(dp)
    register_user_handlers(dp)
    register_post_handlers(dp)
    register_callback_handlers(dp)
    register_moderation_handlers(dp)
    register_feed_handlers(dp)

    cleanup_task = asyncio.create_task(cleanup_expired_posts_task())
    
    logfire.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    try:
        await dp.start_polling(bot)
    except Exception as e:
        logfire.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –±–æ—Ç–∞: {e}", exc_info=True)
    finally:
        logfire.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏...")
        
        cleanup_task.cancel()
        
        await asyncio.gather(cleanup_task, return_exceptions=True)
        
        await bot.session.close()
        logfire.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logfire.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C).")