#!/usr/bin/env python3
"""
Telegram Events Bot - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import os
import logfire

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Logfire –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ü–ï–†–í–û–ô –∏ –¥–æ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
logfire.configure(
    token=os.getenv("LOGFIRE_TOKEN"),
    project_name="dghdrhd",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Logfire
    send_to_logfire=True,
    scrubbing=False,
    debug=True  # –í–∫–ª—é—á–∏—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å
)

# –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
logfire.info("üü¢ Logfire –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")

import asyncio
from contextlib import asynccontextmanager
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from events_bot.database import init_database
from events_bot.bot.handlers import (
    register_start_handlers,
    register_user_handlers,
    register_post_handlers,
    register_callback_handlers,
    register_moderation_handlers,
    register_feed_handlers,
)
from events_bot.bot.middleware import DatabaseMiddleware
from events_bot.database.services.post_service import PostService
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ loguru —Å Logfire
logger.configure(
    handlers=[logfire.loguru_handler()]
)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    logfire_token = os.getenv("LOGFIRE_TOKEN")
    bot_token = os.getenv("BOT_TOKEN")
    
    if not bot_token:
        logfire.critical("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    logfire.info(f"üîë –¢–æ–∫–µ–Ω Logfire: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if logfire_token else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    logfire.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

    # –ü–æ–¥—Ö–≤–∞—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        from dotenv import load_dotenv
        load_dotenv()
        logfire.info("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
    except Exception as e:
        logfire.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env: {e}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        await init_database()
        logfire.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logfire.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return

    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = Bot(token=bot_token)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    dp.message.middleware(DatabaseMiddleware())
    dp.callback_query.middleware(DatabaseMiddleware())

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    register_start_handlers(dp)
    register_user_handlers(dp)
    register_post_handlers(dp)
    register_callback_handlers(dp)
    register_moderation_handlers(dp)
    register_feed_handlers(dp)

    logfire.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    async def cleanup_expired_posts_task():
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        from events_bot.bot.utils import get_db_session
        from events_bot.storage import file_storage
        
        while True:
            try:
                async with get_db_session() as db:
                    expired = await PostService.get_expired_posts_info(db)
                    deleted = await PostService.delete_expired_posts(db)
                    
                    if deleted:
                        logfire.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {deleted}")
                        for row in expired:
                            image_id = row.get("image_id")
                            if image_id:
                                try:
                                    await file_storage.delete_file(image_id)
                                except Exception as e:
                                    logfire.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {image_id}: {e}")
            except Exception as e:
                logfire.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")
            await asyncio.sleep(60 * 10)  # –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

    try:
        logfire.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await asyncio.gather(
            dp.start_polling(bot),
            cleanup_expired_posts_task(),
        )
    except KeyboardInterrupt:
        logfire.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logfire.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()
        logfire.info("üîå –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")


if __name__ == "__main__":
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    if not os.getenv("LOGFIRE_TOKEN"):
        print("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: LOGFIRE_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –õ–æ–≥–∏ –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ Logfire")
    
    logfire.info("üîß –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    asyncio.run(main())
