from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import logfire
from events_bot.database.services import (
    ModerationService,
    PostService,
    NotificationService,
)
from events_bot.bot.utils import send_post_notification
from events_bot.storage import file_storage
from events_bot.database.models import ModerationAction
from events_bot.bot.keyboards import (
    get_moderation_keyboard,
    get_moderation_queue_keyboard,
    get_main_keyboard,
)

router = Router()


def register_moderation_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    dp.include_router(router)


@router.message(F.text == "/moderation")
async def cmd_moderation(message: Message, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /moderation"""
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")
    pending_posts = await ModerationService.get_moderation_queue(db)

    if not pending_posts:
        logfire.info("–û—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç–∞")
        await message.answer(
            "–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.",
            reply_markup=get_main_keyboard(),
        )
        return

    logfire.info(f"–ù–∞–π–¥–µ–Ω–æ {len(pending_posts)} –ø–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
    response = "–ü–æ—Å—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n\n"
    for post in pending_posts:
        await db.refresh(post, attribute_names=["author", "categories"])
        category_names = [cat.name for cat in post.categories] if post.categories else ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ']
        category_str = ', '.join(category_names)
        post_city = getattr(post, 'city', '–ù–µ —É–∫–∞–∑–∞–Ω')
        response += f"{post.title}\n"
        response += f"–ì–æ—Ä–æ–¥: {post_city}\n"
        response += f"{post.author.first_name or post.author.username}\n"
        response += f"{category_str}\n"
        response += f"ID: {post.id}\n\n"

    await message.answer(
        response, reply_markup=get_main_keyboard()
    )


@router.callback_query(F.data == "moderation")
async def show_moderation_queue_callback(callback: CallbackQuery, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
    pending_posts = await ModerationService.get_moderation_queue(db)

    if not pending_posts:
        logfire.info("–û—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç–∞")
        await callback.message.edit_text(
            "–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.",
            reply_markup=get_moderation_queue_keyboard(),
        )
        return

    logfire.info(f"–ù–∞–π–¥–µ–Ω–æ {len(pending_posts)} –ø–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
    response = "–ü–æ—Å—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n\n"
    for post in pending_posts:
        await db.refresh(post, attribute_names=["author", "categories"])
        category_names = [cat.name for cat in post.categories] if post.categories else ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ']
        category_str = ', '.join(category_names)
        post_city = getattr(post, 'city', '–ù–µ —É–∫–∞–∑–∞–Ω')
        response += f"{post.title}\n"
        response += f"–ì–æ—Ä–æ–¥: {post_city}\n"
        response += f"{post.author.first_name or post.author.username}\n"
        response += f"{category_str}\n"
        response += f"ID: {post.id}\n\n"

    await callback.message.edit_text(
        response, reply_markup=get_moderation_queue_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "refresh_moderation")
async def refresh_moderation_queue(callback: CallbackQuery, db):
    """–û–±–Ω–æ–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ–±–Ω–æ–≤–∏–ª –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
    pending_posts = await ModerationService.get_moderation_queue(db)

    if not pending_posts:
        logfire.info("–û—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
        await callback.message.edit_text(
            "–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.",
            reply_markup=get_moderation_queue_keyboard(),
        )
        await callback.answer("–û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        return

    logfire.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: –Ω–∞–π–¥–µ–Ω–æ {len(pending_posts)} –ø–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
    response = "–ü–æ—Å—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n\n"
    for post in pending_posts:
        await db.refresh(post, attribute_names=["author", "categories"])
        category_names = [cat.name for cat in post.categories] if post.categories else ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ']
        category_str = ', '.join(category_names)
        post_city = getattr(post, 'city', '–ù–µ —É–∫–∞–∑–∞–Ω')
        response += f"{post.title}\n"
        response += f"–ì–æ—Ä–æ–¥: {post_city}\n"
        response += f"{post.author.first_name or post.author.username}\n"
        response += f"{category_str}\n"
        response += f"ID: {post.id}\n\n"

    await callback.message.edit_text(
        response, reply_markup=get_moderation_queue_keyboard()
    )
    await callback.answer("–û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞")


@router.callback_query(F.data.startswith("moderate_"))
async def process_moderation_action(callback: CallbackQuery, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    data = callback.data.split("_")
    action = data[1]
    post_id = int(data[2])
    
    logfire.info(f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {callback.from_user.id} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ {action} –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}")

    if action == "approve":
        post = await PostService.approve_post(db, post_id, callback.from_user.id)
        if post:
            # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
            post = await PostService.publish_post(db, post_id)
            await db.refresh(post, attribute_names=["author", "categories"])
            logfire.info(f"–ü–æ—Å—Ç {post_id} –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            users_to_notify = await NotificationService.get_users_to_notify(
                db, post
            )
            logfire.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {len(users_to_notify)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            await send_post_notification(callback.bot, post, users_to_notify, db)

            await callback.answer("‚úÖ –ü–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
            await callback.message.delete()
        else:
            logfire.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ {post_id}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞")

    elif action == "reject":
        post = await PostService.reject_post(db, post_id, callback.from_user.id)
        if post:
            await db.refresh(post, attribute_names=["author", "categories"])
            logfire.info(f"–ü–æ—Å—Ç {post_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.id}")
            await callback.answer("‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω!")
            await callback.message.delete()
        else:
            logfire.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ {post_id}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞")

    elif action == "changes":
        post = await PostService.request_changes(db, post_id, callback.from_user.id)
        if post:
            await db.refresh(post, attribute_names=["author", "categories"])
            logfire.info(f"–î–ª—è –ø–æ—Å—Ç–∞ {post_id} –∑–∞–ø—Ä–æ—à–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.id}")
            await callback.answer("üìù –ó–∞–ø—Ä–æ—à–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ—Å—Ç–µ!")
            await callback.message.delete()
        else:
            logfire.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
