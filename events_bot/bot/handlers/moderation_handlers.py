import os
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
import logfire

from events_bot.database.services import (
    ModerationService,
    PostService,
    NotificationService,
)
from events_bot.bot.utils import send_post_notification
from events_bot.database.models import ModerationAction
from events_bot.bot.keyboards import (
    get_main_keyboard,
    get_moderation_queue_keyboard,
)
from events_bot.bot.states.moderation_states import ModerationStates

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: MODERATION_GROUP_ID —Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
# –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç —á–∞—Ç–æ–≤, –Ω–µ –∏–º–µ—é—â–∏—Ö —ç—Ç–æ–≥–æ ID, –±—É–¥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è.
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ MODERATION_GROUP_ID –≤ –≤–∞—à–µ–º .env —Ñ–∞–π–ª–µ.
# –ü—Ä–∏–º–µ—Ä: MODERATION_GROUP_ID=-100123456789
try:
    MODERATION_GROUP_ID = int(os.getenv("MODERATION_GROUP_ID", 0))
    if MODERATION_GROUP_ID == 0:
        logfire.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è MODERATION_GROUP_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –§—É–Ω–∫—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.")
except (ValueError, TypeError):
    logfire.error("MODERATION_GROUP_ID –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
    MODERATION_GROUP_ID = 0


router = Router()

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä–æ–º –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ—É—Ç–µ—Ä–∞ ---
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–ª–±—ç–∫–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏.
if MODERATION_GROUP_ID:
    router.message.filter(F.chat.id == MODERATION_GROUP_ID)
    router.callback_query.filter(F.message.chat.id == MODERATION_GROUP_ID)


def register_moderation_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    dp.include_router(router)


@router.message(Command("moderation"))
async def cmd_moderation(message: Message, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /moderation"""
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É.")
    
    try:
        pending_posts = await ModerationService.get_moderation_queue(db)

        if not pending_posts:
            logfire.info("–û—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç–∞.")
            await message.answer(
                "–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.",
                reply_markup=get_main_keyboard(),
            )
            return

        logfire.info(f"–ù–∞–π–¥–µ–Ω–æ {len(pending_posts)} –ø–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
        response = "–ü–æ—Å—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n\n"
        for post in pending_posts:
            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–µ–Ω—É–∂–Ω—ã–π –≤—ã–∑–æ–≤ db.refresh —É–¥–∞–ª–µ–Ω ---
            # –°–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∞–≤—Ç–æ—Ä, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏) –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Å–µ—Ä–≤–∏—Å–µ.
            category_names = [cat.name for cat in post.categories] if hasattr(post, 'categories') else ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ']
            category_str = ', '.join(category_names)
            author_name = post.author.first_name or post.author.username if hasattr(post, 'author') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            post_city = getattr(post, 'city', '–ù–µ —É–∫–∞–∑–∞–Ω')

            response += f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {post.title}\n"
            response += f"–ì–æ—Ä–æ–¥: {post_city}\n"
            response += f"–ê–≤—Ç–æ—Ä: {author_name}\n"
            response += f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_str}\n"
            response += f"ID: `{post.id}`\n\n"

        # –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(response) > 4096:
            response = response[:4090] + "\n..."
        
        await message.answer(response, reply_markup=get_main_keyboard(), parse_mode="MarkdownV2")
    except Exception as e:
        logfire.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")


@router.callback_query(F.data.in_({"moderation", "refresh_moderation"}))
async def show_moderation_queue_callback(callback: CallbackQuery, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª/–æ–±–Ω–æ–≤–∏–ª –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
    
    try:
        pending_posts = await ModerationService.get_moderation_queue(db)

        if not pending_posts:
            logfire.info("–û—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç–∞.")
            await callback.message.edit_text(
                "–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.",
                reply_markup=get_moderation_queue_keyboard(),
            )
            await callback.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
            return

        logfire.info(f"–ù–∞–π–¥–µ–Ω–æ {len(pending_posts)} –ø–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
        response = "–ü–æ—Å—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n\n"
        for post in pending_posts:
            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–µ–Ω—É–∂–Ω—ã–π –≤—ã–∑–æ–≤ db.refresh —É–¥–∞–ª–µ–Ω ---
            category_names = [cat.name for cat in post.categories] if hasattr(post, 'categories') else ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ']
            category_str = ', '.join(category_names)
            author_name = post.author.first_name or post.author.username if hasattr(post, 'author') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            post_city = getattr(post, 'city', '–ù–µ —É–∫–∞–∑–∞–Ω')

            response += f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {post.title}\n"
            response += f"–ì–æ—Ä–æ–¥: {post_city}\n"
            response += f"–ê–≤—Ç–æ—Ä: {author_name}\n"
            response += f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_str}\n"
            response += f"ID: `{post.id}`\n\n"

        if len(response) > 4096:
            response = response[:4090] + "\n..."
        
        await callback.message.edit_text(
            response, reply_markup=get_moderation_queue_keyboard(), parse_mode="MarkdownV2"
        )
        if callback.data == "refresh_moderation":
            await callback.answer("‚úÖ –û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        else:
            await callback.answer()
            
    except TelegramBadRequest:
        logfire.warning("–ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ TelegramBadRequest, —Ç.–∫. —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.")
        await callback.answer("‚ÑπÔ∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ.")
    except Exception as e:
        logfire.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)


@router.callback_query(F.data.startswith("moderate_"))
async def process_moderation_action(callback: CallbackQuery, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–æ–¥–æ–±—Ä–∏—Ç—å, –æ—Ç–∫–ª–æ–Ω–∏—Ç—å, –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)"""
    await callback.answer()
    try:
        _, action, post_id_str = callback.data.split("_", 2)
        post_id = int(post_id_str)
    except ValueError:
        logfire.error(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ callback: {callback.data}")
        await callback.message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return

    logfire.info(f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {callback.from_user.id} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '{action}' –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}.")

    try:
        if action == "approve":
            post = await PostService.approve_post(db, post_id, callback.from_user.id)
            if post:
                # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–µ–Ω—É–∂–Ω—ã–π db.refresh —É–¥–∞–ª–µ–Ω. –°–µ—Ä–≤–∏—Å –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. ---
                logfire.info(f"–ü–æ—Å—Ç {post_id} –æ–¥–æ–±—Ä–µ–Ω –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                users_to_notify = await NotificationService.get_users_to_notify(db, post)
                logfire.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π {len(users_to_notify)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
                await send_post_notification(callback.bot, post, users_to_notify, db)

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞
                try:
                    await callback.bot.send_message(
                        chat_id=post.author_id,
                        text=f"‚úÖ –í–∞—à –ø–æ—Å—Ç '{post.title}' –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!"
                    )
                except Exception as e:
                    logfire.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ {post.author_id}: {e}")

                await callback.message.delete()
            else:
                logfire.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ {post_id} –∏–ª–∏ –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞.")

        elif action in ("reject", "changes"):
            await state.update_data(pending_post_id=post_id, pending_action=action)
            await state.set_state(ModerationStates.waiting_for_comment)
            
            prompt_text = {
                "reject": "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–≤—Ç–æ—Ä–∞):",
                "changes": "üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–≤—Ç–æ—Ä–∞ (—á—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å):",
            }
            await callback.message.edit_text(prompt_text[action])
        
        else:
            logfire.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {action}")
            await callback.message.edit_text("‚ùå –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

    except Exception as e:
        logfire.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}", exc_info=True)
        await callback.message.edit_text("‚ùå –í–æ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")


@router.message(ModerationStates.waiting_for_comment, F.text)
async def receive_moderator_comment(message: Message, state: FSMContext, db):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    data = await state.get_data()
    post_id = data.get("pending_post_id")
    action = data.get("pending_action")
    comment = message.text.strip()
    
    await state.clear()

    if not all([post_id, action]):
        logfire.error("–°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö (post_id –∏–ª–∏ action).")
        await message.answer("‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    logfire.info(f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–æ—Å—Ç–∞ {post_id} —Å –¥–µ–π—Å—Ç–≤–∏–µ–º '{action}'.")

    try:
        post = None
        feedback_text = ""
        if action == "reject":
            post = await PostService.reject_post(db, post_id, message.from_user.id, comment)
            if post:
                await message.answer("‚úÖ –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ—Ä—É.")
                feedback_text = f"‚ùå –í–∞—à –ø–æ—Å—Ç '{post.title}' –æ—Ç–∫–ª–æ–Ω—ë–Ω.\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {comment}"
        elif action == "changes":
            post = await PostService.request_changes(db, post_id, message.from_user.id, comment)
            if post:
                await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ—Ä—É.")
                feedback_text = f"üìù –í–∞—à –ø–æ—Å—Ç '{post.title}' —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {comment}"

        if post:
            try:
                await message.bot.send_message(chat_id=post.author_id, text=feedback_text)
            except Exception as e:
                logfire.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ {post.author_id} –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {e}")
        else:
            logfire.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ '{action}' –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}.")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω.")
            
    except Exception as e:
        logfire.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")