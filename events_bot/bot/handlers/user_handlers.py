from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from events_bot.database.services import UserService, CategoryService, PostService
from events_bot.bot.states import UserStates
from events_bot.bot.keyboards import (
    get_main_keyboard,
    get_category_selection_keyboard,
    get_city_keyboard,
)

router = Router()


def register_user_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    dp.include_router(router)


@router.message(F.text.in_(["/menu", "/main_menu"]))
async def cmd_main_menu(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    menu_text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    await message.answer(
        menu_text,
        reply_markup=get_main_keyboard(),
        parse_mode=None  # –£–±—Ä–∞–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
    )


@router.message(F.text == "/my_posts")
async def cmd_my_posts(message: Message, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_posts"""
    posts = await PostService.get_user_posts(db, message.from_user.id)

    if not posts:
        await message.answer(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤.", reply_markup=get_main_keyboard()
        )
        return

    response = "üìä –í–∞—à–∏ –ø–æ—Å—Ç—ã:\n\n"
    for post in posts:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        await db.refresh(post, attribute_names=["categories"])
        status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω" if post.is_approved else "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
        category_names = [cat.name for cat in post.categories] if post.categories else ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ']
        category_str = ', '.join(category_names)
        post_city = getattr(post, 'city', '–ù–µ —É–∫–∞–∑–∞–Ω')
        response += f"üìù {post.title}\n"
        response += f"üèôÔ∏è {post_city}\n"
        response += f"üìÇ {category_str}\n"
        response += f"üìÖ {post.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        response += f"üìä {status}\n\n"

    await message.answer(response, reply_markup=get_main_keyboard())


@router.message(F.text == "/change_city")
async def cmd_change_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /change_city"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:", reply_markup=get_city_keyboard()
    )
    await state.set_state(UserStates.waiting_for_city)


@router.message(F.text == "/change_category")
async def cmd_change_category(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /change_category"""
    categories = await CategoryService.get_all_categories(db)
    user_categories = await UserService.get_user_categories(
        db, message.from_user.id
    )
    selected_ids = [cat.id for cat in user_categories]

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤:",
        reply_markup=get_category_selection_keyboard(categories, selected_ids),
    )
    await state.set_state(UserStates.waiting_for_categories)


@router.message(F.text == "/help")
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "ü§ñ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ /create_post ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞\n"
        "‚Ä¢ /my_posts ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –ø–æ—Å—Ç–æ–≤\n"
        "‚Ä¢ /feed ‚Äî –ª–µ–Ω—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
        "‚Ä¢ /moderation ‚Äî –º–æ–¥–µ—Ä–∞—Ü–∏—è (–¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤)\n"
        "‚Ä¢ /change_city ‚Äî —Å–º–µ–Ω–∞ –≥–æ—Ä–æ–¥–∞\n"
        "‚Ä¢ /change_category ‚Äî —Å–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
        "‚Ä¢ /menu ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "üìã <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤\n"
        "3. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –ø–æ—Å—Ç—ã\n\n"
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:</b>\n"
        "‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "‚Ä¢ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "‚Ä¢ –í—Å–µ –ø–æ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é\n\n"
        "‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
    )

    await message.answer(
        help_text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"  # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ HTML ‚Äî –Ω–∞–¥—ë–∂–Ω–µ–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    )


@router.callback_query(F.data.startswith("city_"))
async def process_city_selection_callback(callback: CallbackQuery, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    city = callback.data[5:]

    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await UserService.register_user(
        db=db,
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
    )
    user.city = city
    await db.commit()
    categories = await CategoryService.get_all_categories(db)
    await callback.message.edit_text(
        f"üèôÔ∏è –ì–æ—Ä–æ–¥ {city} –≤—ã–±—Ä–∞–Ω!\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤:",
        reply_markup=get_category_selection_keyboard(categories),
    )
    await state.set_state(UserStates.waiting_for_categories)
    await callback.answer()


@router.callback_query(F.data == "change_city")
async def change_city_callback(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:", reply_markup=get_city_keyboard()
    )
    await state.set_state(UserStates.waiting_for_city)
    await callback.answer()


@router.callback_query(F.data == "change_category")
async def change_category_callback(callback: CallbackQuery, state: FSMContext, db):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    categories = await CategoryService.get_all_categories(db)
    user_categories = await UserService.get_user_categories(
        db, callback.from_user.id
    )
    selected_ids = [cat.id for cat in user_categories]

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤:",
        reply_markup=get_category_selection_keyboard(categories, selected_ids),
    )
    await state.set_state(UserStates.waiting_for_categories)
    await callback.answer()


@router.callback_query(F.data == "my_posts")
async def show_my_posts_callback(callback: CallbackQuery, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    posts = await PostService.get_user_posts(db, callback.from_user.id)

    if not posts:
        await callback.message.edit_text(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤.", reply_markup=get_main_keyboard()
        )
        return

    response = "üìä –í–∞—à–∏ –ø–æ—Å—Ç—ã:\n\n"
    for post in posts:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        await db.refresh(post, attribute_names=["categories"])
        status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω" if post.is_approved else "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
        category_names = [cat.name for cat in post.categories] if post.categories else ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ']
        category_str = ', '.join(category_names)
        post_city = getattr(post, 'city', '–ù–µ —É–∫–∞–∑–∞–Ω')
        response += f"üìù {post.title}\n"
        response += f"üèôÔ∏è {post_city}\n"
        response += f"üìÇ {category_str}\n"
        response += f"üìÖ {post.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        response += f"üìä {status}\n\n"

    await callback.message.edit_text(response, reply_markup=get_main_keyboard())
    await callback.answer()


@router.callback_query(F.data == "help")
async def show_help_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    help_text = (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "ü§ñ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞\n"
        "‚Ä¢ üìä –ú–æ–∏ –ø–æ—Å—Ç—ã ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –ø–æ—Å—Ç–æ–≤\n"
        "‚Ä¢ üèôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ ‚Äî —Å–º–µ–Ω–∞ –≥–æ—Ä–æ–¥–∞\n"
        "‚Ä¢ üìÇ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚Äî —Å–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
        "‚Ä¢ üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî /menu\n\n"
        "üìã <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤\n"
        "3. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–æ—Å—Ç—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:</b>\n"
        "‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "‚Ä¢ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "‚Ä¢ –í—Å–µ –ø–æ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é\n\n"
        "‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
    )

    await callback.message.edit_text(
        help_text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: HTML –≤–º–µ—Å—Ç–æ Markdown
    )
    await callback.answer()


@router.callback_query(F.data == "main_menu")
async def show_main_menu_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    menu_text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    await callback.message.edit_text(
        menu_text,
        reply_markup=get_main_keyboard(),
        parse_mode=None  # –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ
    )
    await callback.answer()
