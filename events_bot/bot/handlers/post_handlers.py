from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from typing import Union
import logfire
from events_bot.database.services import PostService, UserService, CategoryService
from events_bot.bot.states import PostStates
from events_bot.bot.keyboards import (
    get_main_keyboard,
    get_category_selection_keyboard,
    get_city_keyboard,
    get_skip_link_keyboard,  # ‚Üê –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
)
from events_bot.storage import file_storage
from loguru import logger

router = Router()


def register_post_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ—Å—Ç–æ–≤"""
    dp.include_router(router)


@router.message(F.text == "/create_post")
async def cmd_create_post(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create_post"""
    await state.set_state(PostStates.creating_post)
    await message.answer(
        "üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ—Å—Ç–∞:",
        reply_markup=get_city_keyboard(for_post=True)
    )
    await state.set_state(PostStates.waiting_for_city_selection)


@router.message(F.text == "/cancel")
async def cmd_cancel_post(message: Message, state: FSMContext, db):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ"""
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞")
    await state.clear()
    await message.answer(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_keyboard()
    )


@router.callback_query(F.data == "create_post")
async def start_create_post(callback: CallbackQuery, state: FSMContext, db):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    await state.set_state(PostStates.creating_post)
    await callback.message.edit_text(
        "üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ—Å—Ç–∞:",
        reply_markup=get_city_keyboard(for_post=True)
    )
    await state.set_state(PostStates.waiting_for_city_selection)
    await callback.answer()


@router.callback_query(F.data == "cancel_post")
async def cancel_post_creation(callback: CallbackQuery, state: FSMContext, db):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()


@router.callback_query(PostStates.waiting_for_city_selection, F.data.startswith("post_city_"))
async def process_post_city_selection(callback: CallbackQuery, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ—Å—Ç–∞"""
    city = callback.data[10:]
    await state.update_data(post_city=city)
    all_categories = await CategoryService.get_all_categories(db)
    await callback.message.edit_text(
        f"üèôÔ∏è –ì–æ—Ä–æ–¥ {city} –≤—ã–±—Ä–∞–Ω!\n\nüìÇ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞:",
        reply_markup=get_category_selection_keyboard(all_categories, for_post=True)
    )
    await state.set_state(PostStates.waiting_for_category_selection)
    await callback.answer()


@router.callback_query(PostStates.waiting_for_category_selection, F.data.startswith("post_category_"))
async def process_post_category_selection(callback: CallbackQuery, state: FSMContext, db):
    """–ú—É–ª—å—Ç–∏–≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ—Å—Ç–∞"""
    category_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    category_ids = data.get("category_ids", [])

    if category_id in category_ids:
        category_ids.remove(category_id)
    else:
        category_ids.append(category_id)
    await state.update_data(category_ids=category_ids)

    all_categories = await CategoryService.get_all_categories(db)
    await callback.message.edit_text(
        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ—Å—Ç–∞ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=get_category_selection_keyboard(all_categories, category_ids, for_post=True)
    )
    await callback.answer()


@router.callback_query(PostStates.waiting_for_category_selection, F.data == "confirm_post_categories")
@logger.catch
async def confirm_post_categories(callback: CallbackQuery, state: FSMContext, db):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ—Å—Ç–∞"""
    data = await state.get_data()
    category_ids = data.get("category_ids", [])
    if not category_ids:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é", show_alert=True)
        return
    await state.update_data(category_ids=category_ids)
    logfire.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {category_ids}")
    await callback.message.edit_text(
        f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö: {len(category_ids)} –≤—ã–±—Ä–∞–Ω–æ\n\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞:"
    )
    await state.set_state(PostStates.waiting_for_title)
    logfire.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ waiting_for_title –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    await callback.answer()


@router.message(PostStates.waiting_for_title)
@logger.catch
async def process_post_title(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ—Å—Ç–∞"""
    logfire.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
    
    if len(message.text) > 100:
        await message.answer("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(title=message.text)
    logfire.info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {message.text}")
    await message.answer("üìÑ –í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:")
    await state.set_state(PostStates.waiting_for_content)
    logfire.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ waiting_for_content –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")


@router.message(PostStates.waiting_for_content)
async def process_post_content(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    if len(message.text) > 2000:
        await message.answer("‚ùå –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(content=message.text)
    await message.answer(
        "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ —Å–∞–π—Ç, –±–∏–ª–µ—Ç—ã –∏ —Ç.–ø.)\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
        reply_markup=get_skip_link_keyboard()
    )
    await state.set_state(PostStates.waiting_for_link)


@router.callback_query(PostStates.waiting_for_link, F.data == "skip_link")
async def skip_link(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏"""
    await state.update_data(link=None)
    await callback.message.edit_text("üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    await callback.message.edit_reply_markup(reply_markup=get_skip_image_keyboard())
    await state.set_state(PostStates.waiting_for_image)
    await callback.answer()


@router.message(PostStates.waiting_for_link)
async def process_post_link(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–∞"""
    link = message.text.strip()
    if not (link.startswith("http://") or link.startswith("https://")):
        await message.answer(
            "‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å `http://` –∏–ª–∏ `https://`\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip",
            reply_markup=get_skip_link_keyboard()
        )
        return
    
    await state.update_data(link=link)
    await message.answer(
        "üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        reply_markup=get_skip_image_keyboard()
    )
    await state.set_state(PostStates.waiting_for_image)


@router.message(PostStates.waiting_for_event_datetime)
async def process_event_datetime(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è"""
    from datetime import datetime
    try:
        from zoneinfo import ZoneInfo
    except Exception:
        ZoneInfo = None
    text = message.text.strip()
    for fmt in ("%d.%m.%Y %H:%M", "%d.%m.%Y %H.%M"):
        try:
            event_dt = datetime.strptime(text, fmt)
            if ZoneInfo is not None:
                msk = ZoneInfo("Europe/Moscow")
                utc = ZoneInfo("UTC")
                event_dt = event_dt.replace(tzinfo=msk).astimezone(utc)
            await state.update_data(event_at=event_dt.isoformat())
            await message.answer(
                "üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
            )
            await state.set_state(PostStates.waiting_for_image)
            return
        except ValueError:
            continue
    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 25.12.2025 18:30. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.message(PostStates.waiting_for_image)
async def process_post_image(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞"""
    if message.text == "/skip":
        await continue_post_creation(message, state, db)
        return

    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip")
        return

    photo = message.photo[-1]
    file_info = await message.bot.get_file(photo.file_id)
    file_data = await message.bot.download_file(file_info.file_path)
    file_id = await file_storage.save_file(file_data.read(), 'jpg')
    
    await state.update_data(image_id=file_id)
    await continue_post_creation(message, state, db)


@router.callback_query(PostStates.waiting_for_image, F.data == "skip_image")
async def skip_image_callback(callback: CallbackQuery, state: FSMContext, db):
    await continue_post_creation(callback, state, db)


async def continue_post_creation(callback_or_message: Union[Message, CallbackQuery], state: FSMContext, db):
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    user_id = callback_or_message.from_user.id
    message = callback_or_message if isinstance(callback_or_message, Message) else callback_or_message.message
    data = await state.get_data()
    title = data.get("title")
    content = data.get("content")
    category_ids = data.get("category_ids", [])
    post_city = data.get("post_city")
    image_id = data.get("image_id")
    event_at_iso = data.get("event_at")
    link = data.get("link")  # ‚Üê –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É

    if not all([title, content, category_ids, post_city]):
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard(),
        )
        await state.clear()
        return

    post = await PostService.create_post_and_send_to_moderation(
        db=db,
        title=title,
        content=content,
        author_id=user_id,
        category_ids=category_ids,
        city=post_city,
        image_id=image_id,
        event_at=event_at_iso,
        link=link,  # ‚Üê –ü–µ—Ä–µ–¥–∞—ë–º —Å—Å—ã–ª–∫—É
        bot=message.bot
    )

    if post:
        await message.answer(
            f"‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –≤ –≥–æ—Ä–æ–¥–µ {post_city} –≤ {len(category_ids)} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö!",
            reply_markup=get_main_keyboard(),
        )
        await state.clear()
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard(),
        )
        await state.clear()
