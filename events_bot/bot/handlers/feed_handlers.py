from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile, InputMediaPhoto, Message
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from events_bot.database.services import PostService, LikeService
from events_bot.bot.keyboards.main_keyboard import get_main_keyboard
from events_bot.bot.keyboards.feed_keyboard import (
    get_feed_list_keyboard,
    get_feed_post_keyboard,
    get_liked_list_keyboard,
    get_liked_post_keyboard,
)
from events_bot.bot.keyboards.link_keyboard import get_post_link_keyboard
from events_bot.storage import file_storage
import logfire
from datetime import timezone
try:
    from zoneinfo import ZoneInfo
except Exception:
    ZoneInfo = None

router = Router()

POSTS_PER_PAGE = 5  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 4-5 –ø–æ—Å—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ

def register_feed_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ª–µ–Ω—Ç—ã"""
    dp.include_router(router)


@router.message(F.text == "/feed")
async def cmd_feed(message: Message, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /feed"""
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ª–µ–Ω—Ç—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")
    await show_feed_page_cmd(message, 0, db)


@router.callback_query(F.data == "feed")
async def show_feed_callback(callback: CallbackQuery, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–µ–Ω—Ç—É –ø–æ—Å—Ç–æ–≤"""
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ª–µ–Ω—Ç—É")
    await show_feed_page(callback, 0, db)


@router.callback_query(F.data.startswith("feed_"))
async def handle_feed_navigation(callback: CallbackQuery, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ª–µ–Ω—Ç–µ"""
    data = callback.data.split("_")
    action = data[1]
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ª–µ–Ω—Ç–µ: {action}")
    try:
        if action in ["prev", "next"]:
            current_page = int(data[2])
            total_pages = int(data[3])
            new_page = max(0, current_page - 1) if action == "prev" else current_page + 1
            await show_feed_page(callback, new_page, db)
        elif action == "open":
            post_id = int(data[2])
            current_page = int(data[3])
            total_pages = int(data[4])
            await show_post_details(callback, post_id, current_page, total_pages, db)
        elif action == "back":
            current_page = int(data[2])
            await show_feed_page(callback, current_page, db)
        elif action == "heart":
            post_id = int(data[2])
            current_page = int(data[3])
            total_pages = int(data[4])
            await handle_post_heart(callback, post_id, db, data)
    except Exception as e:
        logfire.exception("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ª–µ–Ω—Ç–µ {e}", e=e)
    await callback.answer()


@router.callback_query(F.data == "main_menu")
async def return_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard()
    )
    await callback.answer()


async def show_feed_page_cmd(message: Message, page: int, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} –ª–µ–Ω—Ç—ã")
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –ª–µ–Ω—Ç—ã
    posts = await PostService.get_feed_posts(
        db, message.from_user.id, POSTS_PER_PAGE, page * POSTS_PER_PAGE
    )
    if not posts:
        logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} ‚Äî –≤ –ª–µ–Ω—Ç–µ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤")
        await message.answer(
            "üìÆ –í –ª–µ–Ω—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –≤–∞—à–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
            "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–∞–º–æ–º—É",
            reply_markup=get_main_keyboard()
        )
        return
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    total_posts = await PostService.get_feed_posts_count(db, message.from_user.id)
    total_pages = (total_posts + POSTS_PER_PAGE - 1) // POSTS_PER_PAGE
    # –°–ø–∏—Å–æ–∫ –∫—Ä–∞—Ç–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    for post in posts:
        await db.refresh(post, attribute_names=["categories"])
    preview_text = format_feed_list(posts, page * POSTS_PER_PAGE + 1, total_posts)
    await message.answer(
        preview_text,
        reply_markup=get_feed_list_keyboard(posts, page, total_pages),
        parse_mode="HTML",
    )


async def show_feed_page(callback: CallbackQuery, page: int, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–µ–Ω—Ç—ã"""
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} –ª–µ–Ω—Ç—ã")
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –ª–µ–Ω—Ç—ã
    posts = await PostService.get_feed_posts(
        db, callback.from_user.id, POSTS_PER_PAGE, page * POSTS_PER_PAGE
    )
    if not posts:
        logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} ‚Äî –≤ –ª–µ–Ω—Ç–µ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤")
        try:
            await callback.message.edit_text(
                "üìÆ –í –ª–µ–Ω—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –≤–∞—à–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
                "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–∞–º–æ–º—É",
                reply_markup=get_main_keyboard()
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                pass
            else:
                raise
        return
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    total_posts = await PostService.get_feed_posts_count(db, callback.from_user.id)
    total_pages = (total_posts + POSTS_PER_PAGE - 1) // POSTS_PER_PAGE
    for post in posts:
        await db.refresh(post, attribute_names=["categories"])
    preview_text = format_feed_list(posts, page * POSTS_PER_PAGE + 1, total_posts)
    try:
        await callback.message.edit_text(
            preview_text,
            reply_markup=get_feed_list_keyboard(posts, page, total_pages),
            parse_mode="HTML",
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            pass
        else:
            raise


def _msk_str(dt) -> str:
    if not dt:
        return ""
    # event_at —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ –Ω–∞–∏–≤–Ω–æ–µ UTC; –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ú–°–ö
    try:
        msk = ZoneInfo("Europe/Moscow") if ZoneInfo else None
    except Exception:
        msk = None
    if msk:
        dt = dt.replace(tzinfo=timezone.utc).astimezone(msk)
    return dt.strftime('%d.%m.%Y %H:%M')


def format_post_for_feed(post, current_position: int, total_posts: int, likes_count: int = 0) -> str:
    """–§–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å—Ç–∞ (–¥–µ—Ç–∞–ª—å–Ω–æ)"""
    author_name = '–ê–Ω–æ–Ω–∏–º'
    if hasattr(post, 'author') and post.author is not None:
        author_name = (getattr(post.author, 'first_name', None) or getattr(post.author, 'username', None) or '–ê–Ω–æ–Ω–∏–º')
    category_names = []
    if hasattr(post, 'categories') and post.categories is not None:
        category_names = [getattr(cat, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') for cat in post.categories]
    category_str = ', '.join(category_names) if category_names else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    post_city = getattr(post, 'city', '–ù–µ —É–∫–∞–∑–∞–Ω')
    event_at = getattr(post, 'event_at', None)
    event_str = _msk_str(event_at)
    link_text = "\nüîó –°—Å—ã–ª–∫–∞: –µ—Å—Ç—å" if getattr(post, 'link', None) else ""
    return (
        f"üì∞ –ü–æ—Å—Ç\n\n"
        f"üìù <b>{post.title}</b>\n\n"
        f"{post.content}\n\n"
        f"üë§ –ê–≤—Ç–æ—Ä: {author_name}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {post_city}\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_str}\n"
        f"üìÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ –¥–æ: {event_str}\n"
        f"üíñ –°–µ—Ä–¥–µ—á–µ–∫: {likes_count}{link_text}\n\n"
        f"üìä {current_position} –∏–∑ {total_posts} –ø–æ—Å—Ç–æ–≤"
    )


def format_feed_list(posts, current_position_start: int, total_posts: int) -> str:
    """–§–æ—Ä–º–∞—Ç —Å–ø–∏—Å–∫–∞ –∫—Ä–∞—Ç–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ 4-5 –ø–æ—Å—Ç–æ–≤"""
    lines = ["–î–ª—è —Ç–µ–±—è –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", ""]
    for idx, post in enumerate(posts, start=current_position_start):
        category_names = [getattr(cat, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') for cat in (post.categories or [])]
        category_str = ', '.join(category_names) if category_names else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        event_at = getattr(post, 'event_at', None)
        event_str = _msk_str(event_at)
        lines.append(f"{idx}. <b>{post.title}</b>")
        lines.append(f"   üìÇ {category_str}")
        lines.append(f"   üìÖ {event_str}")
        lines.append("")
    lines.append(f"–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}")
    lines.append("–ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ä–æ–±–Ω–µ–µ' –ø–æ–¥ —Å–ø–∏—Å–∫–æ–º")
    return "\n".join(lines)


async def handle_post_heart(callback: CallbackQuery, post_id: int, db, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Å–µ—Ä–¥–µ—á–∫–æ"""
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª –Ω–∞ —Å–µ—Ä–¥–µ—á–∫–æ –ø–æ—Å—Ç—É {post_id}")
    
    try:
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ª–∞–π–∫ –≤ –ë–î
        result = await LikeService.toggle_like(db, callback.from_user.id, post_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        action_text = "–¥–æ–±–∞–≤–ª–µ–Ω–æ" if result["action"] == "added" else "—É–¥–∞–ª–µ–Ω–æ"
        likes_count = result["likes_count"]
        
        response_text = f"–°–µ—Ä–¥–µ—á–∫–æ {action_text}!\n\n"
        response_text += f"üíñ –í—Å–µ–≥–æ —Å–µ—Ä–¥–µ—á–µ–∫: {likes_count}"
        
        await callback.answer(response_text, show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª–∞–π–∫–æ–≤
        is_liked = await LikeService.is_post_liked_by_user(db, callback.from_user.id, post_id)
        
        current_page = int(data[3])
        total_pages = int(data[4])
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ (–ª–µ–Ω—Ç–∞ –∏–ª–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ)
        section = data[0]
        if section == "liked":
            new_keyboard = get_liked_post_keyboard(
                current_page=current_page,
                total_pages=total_pages,
                post_id=post_id,
                is_liked=is_liked,
                likes_count=likes_count,
            )
        else:
            new_keyboard = get_feed_post_keyboard(
                current_page=current_page,
                total_pages=total_pages,
                post_id=post_id,
                is_liked=is_liked,
                likes_count=likes_count,
            )
        await callback.message.edit_reply_markup(reply_markup=new_keyboard)
        
        logfire.info(f"–°–µ—Ä–¥–µ—á–∫–æ –ø–æ—Å—Ç—É {post_id} —É—Å–ø–µ—à–Ω–æ {action_text}")
        
    except Exception as e:
        logfire.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Ä–¥–µ—á–∫–∞ –ø–æ—Å—Ç—É {post_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Ä–¥–µ—á–∫–∞", show_alert=True) 


async def show_post_details(callback: CallbackQuery, post_id: int, current_page: int, total_pages: int, db):
    post = await PostService.get_post_by_id(db, post_id)
    if not post:
        await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    await db.refresh(post, attribute_names=["author", "categories"])
    is_liked = await LikeService.is_post_liked_by_user(db, callback.from_user.id, post.id)
    likes_count = await LikeService.get_post_likes_count(db, post.id)
    text = format_post_for_feed(post, current_page + 1, await PostService.get_feed_posts_count(db, callback.from_user.id), likes_count)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    reply_markup = get_feed_post_keyboard(current_page, total_pages, post.id, is_liked, likes_count)
    if post.link:
        link_keyboard = get_post_link_keyboard(post.link)
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        reply_markup.inline_keyboard.extend(link_keyboard.inline_keyboard)
    
    if post.image_id:
        media_photo = await file_storage.get_media_photo(post.image_id)
        if media_photo:
            try:
                await callback.message.edit_media(
                    media=InputMediaPhoto(media=media_photo.media, caption=text, parse_mode="HTML"),
                    reply_markup=reply_markup,
                )
            except TelegramBadRequest as e:
                if "message is not modified" in str(e):
                    pass
                else:
                    raise
            return
    try:
        await callback.message.edit_text(
            text,
            reply_markup=reply_markup,
            parse_mode="HTML",
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise


@router.callback_query(F.data == "liked_posts")
async def show_liked(callback: CallbackQuery, db):
    await show_liked_page(callback, 0, db)


@router.callback_query(F.data.startswith("liked_"))
async def handle_liked_navigation(callback: CallbackQuery, db):
    data = callback.data.split("_")
    action = data[1]
    try:
        if action in ["prev", "next"]:
            current_page = int(data[2])
            total_pages = int(data[3])
            new_page = max(0, current_page - 1) if action == "prev" else current_page + 1
            await show_liked_page(callback, new_page, db)
        elif action == "open":
            post_id = int(data[2])
            current_page = int(data[3])
            total_pages = int(data[4])
            await show_liked_post_details(callback, post_id, current_page, total_pages, db)
        elif action == "back":
            current_page = int(data[2])
            await show_liked_page(callback, current_page, db)
        elif action == "heart":
            post_id = int(data[2])
            current_page = int(data[3])
            total_pages = int(data[4])
            await handle_post_heart(callback, post_id, db, data)
    except Exception as e:
        logfire.exception("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É {e}", e=e)
    await callback.answer()


async def show_liked_page(callback: CallbackQuery, page: int, db):
    posts = await PostService.get_liked_posts(db, callback.from_user.id, POSTS_PER_PAGE, page * POSTS_PER_PAGE)
    if not posts:
        await callback.message.edit_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π", reply_markup=get_main_keyboard())
        return
    total_posts = await PostService.get_liked_posts_count(db, callback.from_user.id)
    total_pages = (total_posts + POSTS_PER_PAGE - 1) // POSTS_PER_PAGE
    text = format_feed_list(posts, page + 1, total_posts)
    try:
        await callback.message.edit_text(text, reply_markup=get_liked_list_keyboard(posts, page, total_pages))
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise


async def show_liked_post_details(callback: CallbackQuery, post_id: int, current_page: int, total_pages: int, db):
    post = await PostService.get_post_by_id(db, post_id)
    if not post:
        await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    await db.refresh(post, attribute_names=["author", "categories"])
    is_liked = await LikeService.is_post_liked_by_user(db, callback.from_user.id, post.id)
    likes_count = await LikeService.get_post_likes_count(db, post.id)
    text = format_post_for_feed(post, current_page + 1, await PostService.get_liked_posts_count(db, callback.from_user.id), likes_count)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    reply_markup = get_liked_post_keyboard(current_page, total_pages, post.id, is_liked, likes_count)
    if post.link:
        link_keyboard = get_post_link_keyboard(post.link)
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        reply_markup.inline_keyboard.extend(link_keyboard.inline_keyboard)
    
    if post.image_id:
        media_photo = await file_storage.get_media_photo(post.image_id)
        if media_photo:
            try:
                await callback.message.edit_media(
                    media=InputMediaPhoto(media=media_photo.media, caption=text, parse_mode="HTML"),
                    reply_markup=reply_markup,
                )
            except TelegramBadRequest as e:
                if "message is not modified" in str(e):
                    pass
                else:
                    raise
            return
    try:
        await callback.message.edit_text(
            text,
            reply_markup=reply_markup,
            parse_mode="HTML",
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise
