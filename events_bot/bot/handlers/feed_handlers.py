from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile, InputMediaPhoto, Message
from aiogram.fsm.context import FSMContext
from events_bot.database.services import PostService, LikeService
from events_bot.bot.keyboards.main_keyboard import get_main_keyboard
from events_bot.bot.keyboards.feed_keyboard import get_feed_keyboard
from events_bot.storage import file_storage
import logfire

router = Router()

POSTS_PER_PAGE = 1  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –ø–æ—Å—Ç—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

def register_feed_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ª–µ–Ω—Ç—ã"""
    dp.include_router(router)


@router.message(F.text == "/feed")
async def cmd_feed(message: Message, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /feed"""
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ª–µ–Ω—Ç—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")
    await show_feed_page_cmd(message, 0, db)


@router.callback_query(F.data == "feed")
async def show_feed_callback(callback: CallbackQuery, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–µ–Ω—Ç—É –ø–æ—Å—Ç–æ–≤"""
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ª–µ–Ω—Ç—É")
    await show_feed_page(callback, 0, db)


@router.callback_query(F.data.startswith("feed_"))
async def handle_feed_navigation(callback: CallbackQuery, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ª–µ–Ω—Ç–µ"""
    data = callback.data.split("_")
    action = data[1]
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ª–µ–Ω—Ç–µ: {action}")
    try:
        if action in ["prev", "next"]:
            current_page = int(data[2])
            total_pages = int(data[3])
            if action == "prev":
                new_page = max(0, current_page - 1)
            else:
                new_page = current_page + 1
            await show_feed_page(callback, new_page, db)
        elif action == "heart":
            post_id = int(data[2])
            current_page = int(data[3])
            total_pages = int(data[4])
            await handle_post_heart(callback, post_id, db, data)
    except Exception as e:
        logfire.exception("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ª–µ–Ω—Ç–µ {e}", e=e)
    await callback.answer()


@router.callback_query(F.data == "main_menu")
async def return_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard()
    )
    await callback.answer()


async def show_feed_page_cmd(message: Message, page: int, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} –ª–µ–Ω—Ç—ã")
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –ª–µ–Ω—Ç—ã
    posts = await PostService.get_feed_posts(
        db, message.from_user.id, POSTS_PER_PAGE, page * POSTS_PER_PAGE
    )
    if not posts:
        logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} ‚Äî –≤ –ª–µ–Ω—Ç–µ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤")
        await message.answer(
            "üì≠ –í –ª–µ–Ω—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
            "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç —Å–∞–º–æ–º—É",
            reply_markup=get_main_keyboard()
        )
        return
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    total_posts = await PostService.get_feed_posts_count(db, message.from_user.id)
    total_pages = (total_posts + POSTS_PER_PAGE - 1) // POSTS_PER_PAGE
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    post = posts[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç (—Ç–∞–∫ –∫–∞–∫ POSTS_PER_PAGE = 1)
    await db.refresh(post, attribute_names=["author", "categories"])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∞–π–∫ –Ω–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç
    is_liked = await LikeService.is_post_liked_by_user(db, message.from_user.id, post.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –Ω–∞ –ø–æ—Å—Ç
    likes_count = await LikeService.get_post_likes_count(db, post.id)
    
    feed_text = format_post_for_feed(post, page + 1, total_posts, likes_count)
    logfire.info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç {post.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    # –ï—Å–ª–∏ —É –ø–æ—Å—Ç–∞ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
    if post.image_id:
        media_photo = await file_storage.get_media_photo(post.image_id)
        if media_photo:
            logfire.info(f"–ü–æ—Å—Ç {post.id} —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            await message.answer_photo(
                photo=media_photo.media,
                caption=feed_text,
                reply_markup=get_feed_keyboard(page, total_pages, post.id, is_liked, likes_count)
            )
            return
        else:
            logfire.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ {post.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    await message.answer(
        feed_text,
        reply_markup=get_feed_keyboard(page, total_pages, post.id, is_liked, likes_count)
    )


async def show_feed_page(callback: CallbackQuery, page: int, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–µ–Ω—Ç—ã"""
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} –ª–µ–Ω—Ç—ã")
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –ª–µ–Ω—Ç—ã
    posts = await PostService.get_feed_posts(
        db, callback.from_user.id, POSTS_PER_PAGE, page * POSTS_PER_PAGE
    )
    if not posts:
        logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} ‚Äî –≤ –ª–µ–Ω—Ç–µ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤")
        await callback.message.edit_text(
            "üì≠ –í –ª–µ–Ω—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
            "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç —Å–∞–º–æ–º—É",
            reply_markup=get_main_keyboard()
        )
        return
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    total_posts = await PostService.get_feed_posts_count(db, callback.from_user.id)
    total_pages = (total_posts + POSTS_PER_PAGE - 1) // POSTS_PER_PAGE
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    post = posts[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç (—Ç–∞–∫ –∫–∞–∫ POSTS_PER_PAGE = 1)
    await db.refresh(post, attribute_names=["author", "categories"])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∞–π–∫ –Ω–∞ —ç—Ç–æ—Ç –ø–æ—Å—Ç
    is_liked = await LikeService.is_post_liked_by_user(db, callback.from_user.id, post.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –Ω–∞ –ø–æ—Å—Ç
    likes_count = await LikeService.get_post_likes_count(db, post.id)
    
    feed_text = format_post_for_feed(post, page + 1, total_posts, likes_count)
    logfire.info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç {post.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
    # –ï—Å–ª–∏ —É –ø–æ—Å—Ç–∞ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
    if post.image_id:
        media_photo = await file_storage.get_media_photo(post.image_id)
        if media_photo:
            logfire.info(f"–ü–æ—Å—Ç {post.id} —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            await callback.message.edit_media(
                media=InputMediaPhoto(
                    media=media_photo.media,
                    caption=feed_text
                ),
                reply_markup=get_feed_keyboard(page, total_pages, post.id, is_liked, likes_count)
            )
            return
        else:
            logfire.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ {post.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    await callback.message.edit_text(
        feed_text,
        reply_markup=get_feed_keyboard(page, total_pages, post.id, is_liked, likes_count)
    )


def format_post_for_feed(post, current_position: int, total_posts: int, likes_count: int = 0) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è –ª–µ–Ω—Ç—ã"""
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∏–∑–±–µ–≥–∞—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    author_name = '–ê–Ω–æ–Ω–∏–º'
    if hasattr(post, 'author') and post.author is not None:
        author_name = (getattr(post.author, 'first_name', None) or 
                      getattr(post.author, 'username', None) or '–ê–Ω–æ–Ω–∏–º')
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ—Å—Ç–∞
    category_names = []
    if hasattr(post, 'categories') and post.categories is not None:
        category_names = [getattr(cat, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') for cat in post.categories]
    
    category_str = ', '.join(category_names) if category_names else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    
    post_city = getattr(post, 'city', '–ù–µ —É–∫–∞–∑–∞–Ω')
    
    published_at = getattr(post, 'published_at', None)
    published_str = published_at.strftime('%d.%m.%Y %H:%M') if published_at else ''
    
    return (
        f"üì∞ –õ–µ–Ω—Ç–∞ –ø–æ—Å—Ç–æ–≤\n\n"
        f"üìù {post.title}\n\n"
        f"{post.content}\n\n"
        f"üë§ –ê–≤—Ç–æ—Ä: {author_name}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {post_city}\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_str}\n"
        f"üíñ –°–µ—Ä–¥–µ—á–µ–∫: {likes_count}\n"
        f"üìÖ {published_str}\n\n"
        f"üìä {current_position} –∏–∑ {total_posts} –ø–æ—Å—Ç–æ–≤"
    )


async def handle_post_heart(callback: CallbackQuery, post_id: int, db, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Å–µ—Ä–¥–µ—á–∫–æ"""
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª –Ω–∞ —Å–µ—Ä–¥–µ—á–∫–æ –ø–æ—Å—Ç—É {post_id}")
    
    try:
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ª–∞–π–∫ –≤ –ë–î
        result = await LikeService.toggle_like(db, callback.from_user.id, post_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        action_text = "–¥–æ–±–∞–≤–ª–µ–Ω–æ" if result["action"] == "added" else "—É–¥–∞–ª–µ–Ω–æ"
        likes_count = result["likes_count"]
        
        response_text = f"–°–µ—Ä–¥–µ—á–∫–æ {action_text}!\n\n"
        response_text += f"üíñ –í—Å–µ–≥–æ —Å–µ—Ä–¥–µ—á–µ–∫: {likes_count}"
        
        await callback.answer(response_text, show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª–∞–π–∫–æ–≤
        is_liked = await LikeService.is_post_liked_by_user(db, callback.from_user.id, post_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
        current_markup = callback.message.reply_markup
        if current_markup:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –∏–∑ callback_data
            current_page = int(data[3])
            total_pages = int(data[4])
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª–∞–π–∫–æ–≤
            new_keyboard = get_feed_keyboard(
                current_page=current_page,
                total_pages=total_pages,
                post_id=post_id,
                is_liked=is_liked,
                likes_count=likes_count
            )
            await callback.message.edit_reply_markup(reply_markup=new_keyboard)
        
        logfire.info(f"–°–µ—Ä–¥–µ—á–∫–æ –ø–æ—Å—Ç—É {post_id} —É—Å–ø–µ—à–Ω–æ {action_text}")
        
    except Exception as e:
        logfire.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Ä–¥–µ—á–∫–∞ –ø–æ—Å—Ç—É {post_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Ä–¥–µ—á–∫–∞", show_alert=True) 