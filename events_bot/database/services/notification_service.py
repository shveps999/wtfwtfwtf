from typing import List
import logfire
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from ..repositories import UserRepository
from ..models import User, Post
from ..bot.keyboards.link_keyboard import get_post_link_keyboard


class NotificationService:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""

    @staticmethod
    async def get_users_to_notify(db, post: Post) -> List[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø–æ—Å—Ç–µ"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        await db.refresh(post, attribute_names=["author", "categories"])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≥–æ—Ä–æ–¥—É –ø–æ—Å—Ç–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø–æ—Å—Ç–∞
        post_city = getattr(post, 'city', None)
        category_ids = [cat.id for cat in post.categories]
        logfire.info(f"–ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≥–æ—Ä–æ–¥={post_city}, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏={category_ids}")
        
        users = await UserRepository.get_users_by_city_and_categories(
            db, post_city, category_ids
        )

        # –ò—Å–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å—Ç–∞
        filtered_users = [user for user in users if user.id != post.author_id]
        logfire.info(f"–ù–∞–π–¥–µ–Ω–æ {len(filtered_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∞—è –∞–≤—Ç–æ—Ä–∞)")
        
        return filtered_users

    @staticmethod
    def format_post_notification(post: Post) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—Å—Ç–µ"""
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∏–∑–±–µ–≥–∞—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        category_names = []
        if hasattr(post, 'categories') and post.categories is not None:
            category_names = [getattr(cat, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') for cat in post.categories]
        
        category_str = ', '.join(category_names) if category_names else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        author_name = '–ê–Ω–æ–Ω–∏–º'
        if hasattr(post, 'author') and post.author is not None:
            author = post.author
            author_name = (getattr(author, 'first_name', None) or 
                         getattr(author, 'username', None) or '–ê–Ω–æ–Ω–∏–º')
        
        event_at = getattr(post, 'event_at', None)
        event_str = event_at.strftime('%d.%m.%Y %H:%M') if event_at else ''
        
        link_text = "\nüîó –°—Å—ã–ª–∫–∞: –µ—Å—Ç—å" if getattr(post, 'link', None) else ''
        
        return (
            f"üì¨ –ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö '{category_str}'\n\n"
            f"üìå <b>{post.title}</b>\n\n"
            f"üìÑ {post.content}\n\n"
            f"üë§ –ê–≤—Ç–æ—Ä: {author_name}\n"
            f"üìÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ –¥–æ: {event_str}{link_text}"
        )

    @staticmethod
    def get_like_keyboard(post_id: int, liked: bool = False, post_link: str = None) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ª–∞–π–∫–∞ –∏ —Å—Å—ã–ª–∫–æ–π"""
        builder = InlineKeyboardBuilder()
        
        # –ö–Ω–æ–ø–∫–∞ –ª–∞–π–∫–∞
        button_text = "‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º" if liked else "ü§ç –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
        builder.button(text=button_text, callback_data=f"like_post_{post_id}")
        
        # –ö–Ω–æ–ø–∫–∞ —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if post_link:
            builder.button(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ", url=post_link)
        
        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥
        builder.adjust(1)
        return builder.as_markup()
